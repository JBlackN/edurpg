Quest.destroy_all
Quest.create!([
  {name: "requests a click", difficulty: "hard", objectives: "Vaším úkolem za 5 bodů je vytvořit command line aplikaci pracující s GitHub API, pomocí knihoven requests a click. Hotovou aplikaci odevzdáte jako gitový repozitář na GitHubu, případně fakultním GitLabu. V obou případech nám nezapomeňte dát přístup.", description: " Vzhledem k tomu, že všichni máte stejné zadání, doporučujeme použít privátní repozitář. Svůj kód můžete zveřejnit pod nějakou open-source licencí po našem zkontrolování všech navazujících úloh.\r\n\r\nOdkaz na repozitář nám pošlete e-mailem. Pro odevzdání v repozitáři prosím nastavte tag v0.1.\r\n\r\nPřesné rozhraní a chování třídy je dané přiloženými testy. Testy najdete v repozitáři MarekSuchanek/labelord_tests.\r\n\r\nTermín odevzdání je u této úlohy mimořádně v pondělí (včetně) za 19 dní, termín je tedy shodný s příští úlohou. Důrazně však doporučujeme odevzdat ji dříve.", deadline: "2017-10-15 23:59:59", completion_check_id: "lab01", character_id: 1, character_class_id: nil, specialization_id: nil, talent_id: 208},
  {name: "Webové aplikace: Flask", difficulty: "medium", objectives: "Vaším úkolem za 5 bodů je rozšířit command line aplikaci z minulého cvičení o webové rozhraní. Stávající funkcionalita ale musí být zachována, mimo konzole půjde tedy nevíc spustit web server a to pomocí flask run a zároveň vlastním příkazem run_server (viz níže, hint: application factory).", description: " Výslednou aplikaci nasaďte na PythonAnywhere, nebo jiný veřejný hosting. Odkaz na běžící aplikaci a repozitář nám pošlete e-mailem. V repozitáři prosím nastavte tag v0.2.\r\n\r\nTesty specifikující detailní chování a možné použít ke kontrole opět včetně skeletonu najdete v repozitáři MarekSuchanek/labelord_tests ve větvi flask. ", deadline: "2017-10-22 23:59:59", completion_check_id: "lab02", character_id: 1, character_class_id: nil, specialization_id: nil, talent_id: 208},
  {name: "Pandas", difficulty: "medium", objectives: "Vašim úkolem za pět bodů je odpovědět na otázky a vyřešit úkoly níže. Řešení může být zpracováno buď jako Jupyter Notebook, ve kterém bude patrné, která část kódu odpovídá na kterou otázku, nebo jako skript v jazyce Python, který otázky a odpovědi bude vypisovat na standardní výstup.", description: " Otázky a úkoly:\r\n\r\n    Kolik lidí celkem vyplnilo dotazník?\r\n    Kolik z nich bylo z ČR/SR?\r\n    Jaká je, podle dotazníku, průměrná mzda programátorů v ČR/SR? Ve světě?\r\n    Kolik lidí z ČR/SR uvedlo, že používá* Python?\r\n    Kolik z nich chce v používání* Pythonu pokračovat?\r\n    Kolik lidí Python nepoužívá, ale chce ho začít používat?\r\n    Předcházející tři otázky odpovězte také pro Javu místo Pythonu.\r\n    Vykreslete graf, který pro každý programovací jazyk, který lidi z ČR/SR uvedli, ukáže průměrnou měsíční mzdu lidí z ČR/SR, kteří tento jazyk používají* (podle dat dostupných z dotazníku).", deadline: "2017-10-29 23:59:59", completion_check_id: "pandas", character_id: 1, character_class_id: nil, specialization_id: nil, talent_id: 208},
  {name: "Moduly", difficulty: "easy", objectives: "Vaším úkolem za 5 bodů je udělat z vašeho dosavadního projektu balíček instalovatelný přes pip a nahrát jej na testovací nebo opravdovou PyPI.", description: "Jelikož používáme všichni stejný název aplikace Labelord, tak pro PyPI použijte jako název labelord_<username> (v reálných situacích se nedoporučuje jiný název než je jméno importovatelného modulu). Na opravdovou PyPI prosím nahrávejte pouze originální díla s nějakou open-source licencí a vždy pojmenovaná stejně jako je importovatelný modul.", deadline: "2017-11-05 23:59:59", completion_check_id: "lab03", character_id: 1, character_class_id: nil, specialization_id: nil, talent_id: 208},
  {name: "NumPy", difficulty: "hard", objectives: "Vaším úkolem za 5 bodů je vytvořit třídu WaTor v modulu wator reprezentující simulaci Wa-Tor.", description: "Wa-Tor je vodní planeta ve tvaru dvoudimenzionálního toroidu, na které žijí ryby a žraloci. Čas na planetě Wa-Tor plyne diskrétně v jednotlivých skocích zvaných chronony. Za každý chronon se ryby a žraloci pohybují o jedno políčko v mřížce toroidu (pokud je to možné). Žraloci mají energii, která ubývá, a musí jíst ryby, aby ji doplnili. Ryby energii nepotřebují (živí se planktonem, kterého je všude nekonečně). Oba druhy se po dosažení určitého věku množí dělením.", deadline: "2017-11-12 23:59:59", completion_check_id: "wt01", character_id: 1, character_class_id: nil, specialization_id: nil, talent_id: 208},
  {name: "Testování", difficulty: "very_hard", objectives: "Vaším úkolem za 5 bodů je rozšířit testy k dosavadní úloze labelord pomocí pytestu.", description: "Není nutné použít flexmock pokud to nepotřebujete. Využití betamaxu je silně doporučeno.\r\n\r\nNámi dodávané testy jsou tz. akceptační, skoro až integrační. Testují aplikaci z venku, jako black box. Rozšiřte testovací sadu o testy jednotkové: tedy testy, které testují vaše vlastní metody, funkce, třídy apod.", deadline: "2017-11-19 23:59:59", completion_check_id: "lab04", character_id: 1, character_class_id: nil, specialization_id: nil, talent_id: 208},
  {name: "C API a Cython", difficulty: "very_hard", objectives: "Vaším úkolem za 5 bodů je zrychlit pomocí Cythonu úkol ze cvičení na NumPy tak, aby zvládal řešit i simulaci o rozměrech v řádech nižší jednotky tisíců × nižší jednotky tisíců na moderním počítači (srovnatelném s těmi ve školní učebně) v průměrném čase maximálně 15 sekund na chronon. Náhodné generování takto velké simulace musí trvat méně než čtvrt sekundy.", description: " Úkol musí splňovat všechny náležitosti z úlohy na NumPy + podmínku na čas.\r\n\r\nPokud teprve začínáte, můžete použít naše řešení minulé úlohy.\r\n\r\nDoporučujeme využít naše rychlostní testy. Ty najdete opět v repozitáři hroncok/wator_tests, ve větvi cython. ", deadline: "2017-11-26 23:59:59", completion_check_id: "wt02", character_id: 1, character_class_id: nil, specialization_id: nil, talent_id: 208},
  {name: "Dokumentace", difficulty: "easy", objectives: "Vaším úkolem za 5 bodů je vytvořit pomocí Sphinx dokumentaci k vašemu projektu.", description: " Měla by obsahovat textovou část, ze které bude jasné, co je, k čemu je, jak se nainstaluje a jak se používá vaše aplikace. Můžete předpokládat, že uživatel ví, co je to GitHub, issue, pull request, label, repozitář apod. Nepředpokládejte ale, že ví, kde najde API token či webhook, že ví, co to je, jak se k nim chovat apod.\r\n\r\nPokud hypoteticky ukážeme dokumentaci kolegům, kteří nikdy neviděli zadání vašeho úkolu, musí to pro ně být stejně pochopitelné.\r\n\r\nDále by dokumentace měla obsahovat textovou část s ukázkami kódu, které se testují pomocí doctestu. Tato část může vysvětlovat, jak váš kód použít pro výrobu jiné aplikace, nebo může popisovat, jak aplikace uvnitř funguje.\r\n\r\nV dokumentaci by měla existovat kapitola s kompletní API dokumentací vašich modulů, tříd, funkcí apod. Všechny tyto věci musí mít v kódu dokumentační řetězce, které v dokumentaci musí být zobrazeny (t.j. změna dokumentačního řetězce se automaticky promítne ve vygenerované dokumentaci).\r\n\r\nJak sestavit a testovat dokumentaci by mělo být jasné z README.rst (a to musí mít reStructuredText syntaxi).\r\n\r\nGenerování dokumentace ani doctesty nesmí způsobit chybu ani varování. Potlačení chybových a varovných hlášek (např. konfigurací, přesměrováním stderr, apod.) je povoleno jen po konzultaci s cvičícím.\r\n\r\nNa Travis CI spouštějte dokumentační testy.\r\n\r\nDokumentace musí být v angličtině.", deadline: "2017-12-03 23:59:59", completion_check_id: "lab05", character_id: 1, character_class_id: nil, specialization_id: nil, talent_id: 208},
  {name: "GUI v Pythonu: PyQt5", difficulty: "medium", objectives: "Vaším úkolem za 5 bodů je vytvořit pomocí PyQt5 grafické uživatelské rozhraní, které umožní vizualizovat a editovat simulaci Wa-Tor z úloh na NumPy a Cython.", description: " Při práci na úkolu doporučujeme adaptovat vytvořený program ze cvičení.\r\n\r\nRozhraní umožní:\r\n\r\n    vytvářet novou simulaci zadaných rozměrů (prázdnou, náhodně generovanou apod., jak chcete)\r\n    ukládat a načítat simulaci ve formě NumPy matic do/ze souborů dle volby uživatele\r\n        pokud se to nepovede, musí aplikace zobrazit chybové hlášení v grafické podobě (tj. ne jen do konzole)\r\n        formát souborů viz níže\r\n    prohlížet simulaci v grafické podobě\r\n        včetně obrázků ryb a žraloků\r\n        pokud se simulace celá nevejde do okna, musí mít posuvníky (jako na cvičení)\r\n        procházení „okrajem“ mřížky pro simulaci toroidu není nutné\r\n        zoom (např. Ctrl + kolečko myši) není nutný, ale je příjemný\r\n        pro velké odzoomování nahraďte obrázky barvou\r\n    klást do simulace zvířata (ryby, žraloky) a odebírat je (tyto změny se projeví v paměti na úrovni NumPy matice)\r\n        kvůli zjednodušení zvažujte pouze situaci, že všichni žraloci mají stejnou počáteční energii\r\n        „věk“ zvířat se při vložení do matice nastaví náhodně\r\n    klikat na tlačítko Next chronon, které provede a vizualizuje jedno volání metody .tick()\r\n    měnit parametry simulace mezi klikáním na tlačítko z předchozího bodu\r\n    nabídka Help ‣ About vyvolá okno s informacemi o aplikaci:\r\n        název\r\n        stručný popis\r\n        autor/autoři (vy, případně i my, pokud používáte náš kód)\r\n        odkaz na repozitář\r\n        informace o licenci (pozor na licenci PyQt!)\r\n        pokud používáte public domain grafiku z OpenGameArt.org, nemáte právní povinnost zdroj zmínit, ale považujeme to za slušnost", deadline: "2017-12-10 23:59:59", completion_check_id: "wt3", character_id: 1, character_class_id: nil, specialization_id: nil, talent_id: 208},
  {name: "Generátory a AsyncIO", difficulty: "very_hard", objectives: "Vaším úkolem za 5 bodů je implementovat funkci gather_acquaintances, která pomocí asynchronní komunikace s GitHub API (včetně GitHub Search API) ze všech* issues podle zadané specifikace zjistí všechny uživatele, kteří tyto issue komentovali, a to včetně počtu komentářů. Tato funkce nebude mít asynchronní API (tedy nebude async def, ale jen def).", description: " Funkce asya.logic.gather_acquaintances (v projektu MarekSuchanek/asya):\r\n\r\n    parametr search_specs = slovník obsahující specifikaci vyhledávání issues pro GitHub Search API (možné rovnou používat pro požadavky)\r\n    parametr supervisor = objekt, na kterém vaše implementace volá příslušné metody v daných částech kódu (třídu AsyaSupervisor není možné měnit, ale lze „registrovat“ vlastní funkce, které se budou volat, není to však vyžadováno - viz dokumentace třídy; zda voláte metody správně, zjistíte například chováním CLI s progressbarem):\r\n    supervisor.report_issues_search_page(page, number) - volat před zpracováním dané stránky výsledků hledání issues, page = dict s tělem odpovědi, number = číslo stránky\r\n    supervisor.report_issue(issue) - volat po zpracování daného issue, issue = dict s daty issue\r\n    supervisor.report_comment(comment) - volat po zpracování daného komentáře, comment = dict s daty komentáře\r\n    supervisor.report_skip(headers) - volat v případě přeskočení chyby 404 (dle nastavení skip_404 viz níže), headers = hlavičky odpovědi způsobující chybu\r\n    supervisor.report_wait(active, headers) - volat v případě zahájení/ukončení čekání (dle nastavení wait_rate_limit viz níže), active = flag zahájení (True) a ukočení (False), headers = hlavičky odpovědi způsobující čekání\r\n    vrací slovník, kde klíčem je uživatelské jméno a hodnotou příslušný počet komentářů", deadline: "2017-12-17 23:59:59", completion_check_id: "aio", character_id: 1, character_class_id: nil, specialization_id: nil, talent_id: 208},
  {name: "Semestrální práce", difficulty: "medium", objectives: "Součástí hodnocení je semestrální práce. Uvítáme, pokud si vyberete vlastní téma, které budete moci použít v jiném předmětu nebo sami pro sebe. Téma je třeba nechat si od nás schválit. Komplexnější témata mohou být po konzultaci s cvičícími uznaná jako jediná podmínka pro splnění předmětu.", description: " Ve všech případech (kromě případných explicitních výjimek) musí práce splňovat tyto požadavky:\r\n\r\n    musí být napsaná v jazyce Python verze 3.4 nebo vyšší (Cython se samozřejmě také počítá),\r\n    musí splnit zadání, na kterém jsme se dohodli,\r\n    musí být v gitovém repozitáři,\r\n    kód musí splňovat konvence,\r\n    kód, komentáře i dokumentace musí být v angličtině,\r\n    commity musí obsahovat vhodně atomické změny a mít vysvětlující message,\r\n    kód musí být dostatečně pokryt testy (nechceme stanovovat číselnou hranici, použijte selský rozum),\r\n    projekt musí být zabalen jako pythonní balíček (za zveřejnění na PyPI pod svobodnou licencí jsou body navíc),\r\n    projekt by měl stavět na nějakém tématu probraném v předmětu MI-PYT.\r\n\r\nNemusí jít nutně o nový projekt nebo nápad. Přispění do existujícího open-source projektu je také možné. Máte oblíbenou knihovnu v Pythonu a chybí vám funkce na zalévání kočiček? Dopiště ji. Na čemkoliv, co dává smysl, se dá domluvit. ", deadline: "2018-01-31 23:59:59", completion_check_id: "sem", character_id: 1, character_class_id: nil, specialization_id: nil, talent_id: 208},
])
